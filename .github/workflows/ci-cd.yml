name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234p
          POSTGRES_DB: test_taskmanager
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true

      - name: Verify Go installation
        run: |
          echo "Go version:"
          go version
          echo "Go environment:"
          go env
          which go
          export GOROOT=$(go env GOROOT)
          export PATH=$GOROOT/bin:$PATH

      - name: Install dependencies
        run: |
          export GOROOT=$(go env GOROOT)
          export PATH=$GOROOT/bin:$PATH
          go mod tidy

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: 1234p
          DB_NAME: test_taskmanager
          JWT_SECRET: J9xlXeiUW2vRg58I4OZa11FrxczblfgE8k5jiCo-hxw
          GO_ENV: test
        run: |
          export GOROOT=$(go env GOROOT)
          export PATH=$GOROOT/bin:$PATH
          go test ./... -v

  build:
    needs: test  # Зависит от успешного завершения тестов
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: your-app-name:latest

  deploy:
    needs: build  # Зависит от успешной сборки Docker-образа
    runs-on: ubuntu-latest
    steps:
      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}